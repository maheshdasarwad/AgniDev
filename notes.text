main.py
import streamlit as st
from crop_advisor import CropAdvisor
from image_analyzer import ImageAnalyzer
from financial_planning import display_financial_planning
from dotenv import load_dotenv
import os
import base64

# Set page configuration
st.set_page_config(
    page_title="Smart Farm Manager",
    page_icon="üçÉ",
    layout="wide"
)

# Load environment variables
load_dotenv()

# Language Strings for UI texts
LANGUAGE_STRINGS = {
    "en": {
        "welcome": "Welcome, Farmer!",
        "page_header": "Farmer's Crop Planning Assistant",
        "main_header": "Smart Farm Manager",
        "crop_advisor": "Crop Advisor",
        "image_analysis": "Image Analysis",
        "financial_planning": "Financial Planning",
        "enter_crop_name": "Enter Crop Name",
        "get_crop_advice": "Get Crop Advice",
        "analyzing_image": "Analyzing image...",
        "upload_image": "Upload Crop Image",
        "get_financial_plan": "Get Financial Plan",
        "enter_crop_type": "Enter Crop Type",
        "enter_land_area": "Enter Land Area (acres):",
        "enter_budget": "Enter Budget (INR):",
        "manage_crops": "Manage Crops",
        "view_finances": "View Finances",
        "ask_ai_assistant": "Ask AI Assistant",
        "crop_management": "Crop Management",
        "financial_records": "Financial Records",
        "track_crops": "Track and manage your crops",
        "crop_management_desc": "Monitor growth stages, schedule activities, and track yields effectively with our comprehensive crop management system.",
        "track_finances": "Track income and expenses",
        "financial_desc": "Monitor financial transactions and generate comprehensive reports to keep track of your farm's financial health.",
        "ai_assistant": "AI Assistant",
        "ask_assistant": "How to Grow your Plant Health let's Discuss!",
        "home_welcome": "Welcome to Smart Farm Manager",
        "home_subtitle": "Manage your farm efficiently with our comprehensive tools"
    },
    "mr": {
        "welcome": "‡§∂‡•á‡§§‡§ï‡§∞‡•Ä, ‡§§‡•Å‡§Æ‡§ö‡•á ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§Ü‡§π‡•á!",
        "page_header": "‡§∂‡•á‡§§‡§ï‡§∞‡•ç‚Äç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§∂‡•á‡§§‡•Ä ‡§®‡§ø‡§Ø‡•ã‡§ú‡§® ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï",
        "main_header": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§´‡§æ‡§∞‡•ç‡§Æ ‡§Æ‡•Ö‡§®‡•á‡§ú‡§∞",
        "crop_advisor": "‡§™‡§ø‡§ï‡•á ‡§∏‡§≤‡•ç‡§≤‡§æ",
        "image_analysis": "‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "financial_planning": "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§®‡§ø‡§Ø‡•ã‡§ú‡§®",
        "enter_crop_name": "‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ ‡§≠‡§∞‡§æ",
        "get_crop_advice": "‡§∏‡§≤‡•ç‡§≤‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§æ",
        "analyzing_image": "‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á‡§≤‡•á ‡§ú‡§æ‡§§ ‡§Ü‡§π‡•á...",
        "upload_image": "‡§™‡§ø‡§ï‡§æ‡§ö‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡§æ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ",
        "get_financial_plan": "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§æ",
        "enter_crop_type": "‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ",
        "enter_land_area": "‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≥ (‡§è‡§ï‡§∞):",
        "enter_budget": "‡§¨‡§ú‡•á‡§ü (INR):",
        "manage_crops": "‡§™‡§ø‡§ï‡•á ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡§æ",
        "view_finances": "‡§µ‡§ø‡§§‡•ç‡§§ ‡§™‡§π‡§æ",
        "ask_ai_assistant": "AI ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï‡§æ‡§≤‡§æ ‡§µ‡§ø‡§ö‡§æ‡§∞‡§æ",
        "crop_management": "‡§™‡•Ä‡§ï ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§®",
        "financial_records": "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§®‡•ã‡§Ç‡§¶‡•Ä",
        "track_crops": "‡§Ü‡§™‡§≤‡•Ä ‡§™‡§ø‡§ï‡•á ‡§ü‡•ç‡§∞‡•Ö‡§ï ‡§Ü‡§£‡§ø ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡§æ",
        "crop_management_desc": "‡§Ü‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§∞‡•ç‡§µ‡§∏‡§Æ‡§æ‡§µ‡•á‡§∂‡§ï ‡§™‡•Ä‡§ï ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§® ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä‡§∏‡§π ‡§µ‡§æ‡§¢‡•Ä‡§ö‡•á ‡§ü‡§™‡•ç‡§™‡•á, ‡§µ‡•á‡§≥‡§æ‡§™‡§§‡•ç‡§∞‡§ï ‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§ï‡§≤‡§æ‡§™ ‡§Ü‡§£‡§ø ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä‡§™‡§£‡•á ‡§ü‡•ç‡§∞‡•Ö‡§ï ‡§ï‡§∞‡§æ.",
        "track_finances": "‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§Ü‡§£‡§ø ‡§ñ‡§∞‡•ç‡§ö ‡§ü‡•ç‡§∞‡•Ö‡§ï ‡§ï‡§∞‡§æ",
        "financial_desc": "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞‡§æ‡§Ç‡§ö‡•á ‡§®‡§ø‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡§æ ‡§Ü‡§£‡§ø ‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ ‡§∂‡•á‡§§‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§Æ‡§æ‡§ó‡•ã‡§µ‡§æ ‡§†‡•á‡§µ‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§∏‡§∞‡•ç‡§µ‡§∏‡§Æ‡§æ‡§µ‡•á‡§∂‡§ï ‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ.",
        "ai_assistant": "AI ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï",
        "ask_assistant": "‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§µ‡§®‡§∏‡•ç‡§™‡§§‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø‡§æ‡§ö‡•á ‡§∏‡§Ç‡§µ‡§∞‡•ç‡§ß‡§® ‡§ï‡§∏‡•á ‡§ï‡§∞‡§æ‡§µ‡•á ‡§§‡•á ‡§ö‡§∞‡•ç‡§ö‡§æ ‡§ï‡§∞‡•Ç!",
        "home_welcome": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§´‡§æ‡§∞‡•ç‡§Æ ‡§Æ‡•Ö‡§®‡•á‡§ú‡§∞‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Ü‡§™‡§≤‡•á ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§Ü‡§π‡•á",
        "home_subtitle": "‡§Ü‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§∞‡•ç‡§µ‡§∏‡§Æ‡§æ‡§µ‡•á‡§∂‡§ï ‡§∏‡§æ‡§ß‡§®‡§æ‡§Ç‡§∏‡§π ‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ ‡§∂‡•á‡§§‡•Ä‡§ö‡•á ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∑‡§Æ‡§§‡•á‡§®‡•á ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§® ‡§ï‡§∞‡§æ"
    }
}

# Sidebar language selection with human-readable options
lang_option = st.sidebar.selectbox("Select Language / ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ", ["English", "‡§Æ‡§∞‡§æ‡§†‡•Ä"])
language = "en" if lang_option == "English" else "mr"

def get_base64_encoded_image(image_path):
    """Get base64 encoded image to use as background"""
    with open(image_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode()

def inject_custom_css():
    """Inject custom CSS including the dynamic background"""
    with open("style.css") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
    
    # Add additional CSS for the homepage layout
    st.markdown("""
    <style>
    .hero-section {
        background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url("https://images.unsplash.com/photo-1500382017468-9049fed747ef?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1932&q=80");
        background-size: cover;
        background-position: center;
        color: white;
        padding: 80px 20px;
        text-align: center;
        margin-bottom: 40px;
        border-radius: 0;
    }
    
    .hero-title {
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 4px #000000;
    }
    
    .hero-subtitle {
        font-size: 1.5rem;
        margin-bottom: 2rem;
        text-shadow: 1px 1px 2px #000000;
    }
    
    .feature-card {
        background-color: white;
        border-radius: 10px;
        padding: 30px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        height: 100%;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .feature-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
    }
    
    .feature-icon {
        font-size: 40px;
        color: #2E7D32;
        margin-bottom: 20px;
    }
    
    .feature-title {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 15px;
        color: #2E7D32;
    }
    
    .feature-description {
        color: #333;
        margin-bottom: 20px;
    }
    
    .feature-button {
        background-color: #2E7D32;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        text-align: center;
        display: inline-block;
        cursor: pointer;
        text-decoration: none;
        font-weight: 600;
        transition: background-color 0.3s ease;
    }
    
    .feature-button:hover {
        background-color: #66BB6A;
        text-decoration: none;
    }
    
    .assistant-image {
        max-width: 150px;
        margin: 0 auto;
        display: block;
    }
    
    .stButton button {
        background-color: #2E7D32;
        color: white;
        font-weight: 600;
        padding: 0.7rem 1.8rem;
        border-radius: 8px;
    }
    
    .stButton button:hover {
        background-color: #66BB6A;
    }
    </style>
    """, unsafe_allow_html=True)

def inject_header():
    """Create the application header"""
    header = f"""
    <header>
        <div class="header-content">
            <div class="logo">
                <span>üçÉ {LANGUAGE_STRINGS[language]['main_header']}</span>
            </div>
            <div class="user-actions">
                <span>{LANGUAGE_STRINGS[language]['welcome']}</span>
                <a href="#" class="logout-btn">Logout</a>
            </div>
        </div>
    </header>
    """
    st.markdown(header, unsafe_allow_html=True)

def inject_footer():
    """Create the application footer"""
    footer = """
    <footer>
        <div class="footer-content">
            <div class="footer-left">
                <p>¬© 2025 Smart Farm Manager. All rights reserved.</p>
            </div>
            <div class="footer-right">
                <a href="#"><b>About</b></a>
                <a href="#"><b>Contact</b></a>
                <a href="#"><b>Privacy</b></a>
                <span><b>Created by Team AgniDev</b></span>
            </div>
        </div>
    </footer>
    """
    st.markdown(footer, unsafe_allow_html=True)

def display_home_page():
    """Display the home page with feature cards"""
    # Hero section
    st.markdown(f"""
    <div class="hero-section">
        <h1 class="hero-title">{LANGUAGE_STRINGS[language]['home_welcome']}</h1>
        <p class="hero-subtitle">{LANGUAGE_STRINGS[language]['home_subtitle']}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Feature cards in three columns
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        <div class="feature-card">
            <div class="feature-icon">üå±</div>
            <h3 class="feature-title">{LANGUAGE_STRINGS[language]['crop_management']}</h3>
            <p class="feature-description">{LANGUAGE_STRINGS[language]['track_crops']}</p>
            <p class="feature-description">{LANGUAGE_STRINGS[language]['crop_management_desc']}</p>
            <a href="#" class="feature-button">{LANGUAGE_STRINGS[language]['manage_crops']}</a>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="feature-card">
            <div style="text-align: center;">
                <img src="https://cdn.icon-icons.com/icons2/1371/PNG/512/robot03_90832.png" class="assistant-image" alt="AI Assistant">
            </div>
            <h3 class="feature-title" style="text-align: center;">{LANGUAGE_STRINGS[language]['ai_assistant']}</h3>
            <p class="feature-description" style="text-align: center;">{LANGUAGE_STRINGS[language]['ask_assistant']}</p>
            <div style="text-align: center;">
                <a href="#" class="feature-button">{LANGUAGE_STRINGS[language]['ask_ai_assistant']}</a>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="feature-card">
            <div class="feature-icon">üí∞</div>
            <h3 class="feature-title">{LANGUAGE_STRINGS[language]['financial_records']}</h3>
            <p class="feature-description">{LANGUAGE_STRINGS[language]['track_finances']}</p>
            <p class="feature-description">{LANGUAGE_STRINGS[language]['financial_desc']}</p>
            <a href="#" class="feature-button">{LANGUAGE_STRINGS[language]['view_finances']}</a>
        </div>
        """, unsafe_allow_html=True)

def display_crop_advisor():
    """Display the crop advisor tab content"""
    advisor = CropAdvisor(language=language)
    st.subheader(LANGUAGE_STRINGS[language]['crop_advisor'])
    crop_name = st.text_input(
        LANGUAGE_STRINGS[language]['enter_crop_name'],
        help="E.g., Rice, Wheat, Maize etc." if language=="en" else "‡§â‡§¶‡§æ., ‡§§‡§æ‡§Ç‡§¶‡•Ç‡§≥, ‡§ó‡§π‡•Ç, ‡§Æ‡§ï‡§æ ‡§á."
    )
    if st.button(LANGUAGE_STRINGS[language]['get_crop_advice']):
        with st.spinner("Fetching advice..." if language=="en" else "‡§∏‡§≤‡•ç‡§≤‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§§ ‡§Ü‡§π‡•á..."):
            advice, error = advisor.get_crop_advice(crop_name)
            if error:
                st.error(error)
            else:
                st.markdown(f"<div class='chat-response'><strong>{'Advice' if language=='en' else '‡§∏‡§≤‡•ç‡§≤‡§æ'}:</strong> {advice}</div>", unsafe_allow_html=True)

def display_image_analysis():
    """Display the image analysis tab content"""
    st.subheader(LANGUAGE_STRINGS[language]['image_analysis'])
    uploaded_file = st.file_uploader(LANGUAGE_STRINGS[language]['upload_image'], type=['jpg', 'jpeg', 'png'], accept_multiple_files=False)
    if uploaded_file:
        try:
            analyzer = ImageAnalyzer(language=language)
        except Exception as e:
            st.error(f"Initialization Error: {str(e)}")
            return
        with st.spinner(LANGUAGE_STRINGS[language]['analyzing_image']):
            image_data = uploaded_file.getvalue()
            analysis, error = analyzer.analyze_crop_image(image_data)
            st.image(image_data, use_column_width=True)
            if error:
                st.error(f"Analysis Error: {error}")
            elif analysis:
                st.markdown(f"<div class='chat-response'><strong>{'Analysis' if language=='en' else '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£'}:</strong> {analysis}</div>", unsafe_allow_html=True)

def main():
    """Main application function"""
    # Load custom CSS
    inject_custom_css()
    
    inject_header()
    
    st.markdown("<main>", unsafe_allow_html=True)
    
    # Display Marathi specific text if language is Marathi
    if language == "mr":
        st.markdown("<div class='marathi-text'></div>", unsafe_allow_html=True)

    # Create a radio button for navigation that looks like tabs
    app_mode = st.sidebar.radio(
        "Navigation",
        ["Home", LANGUAGE_STRINGS[language]['crop_advisor'], 
         LANGUAGE_STRINGS[language]['image_analysis'], 
         LANGUAGE_STRINGS[language]['financial_planning']]
    )
    
    if app_mode == "Home":
        display_home_page()
    else:
        tabs = st.tabs([
            LANGUAGE_STRINGS[language]['crop_advisor'],
            LANGUAGE_STRINGS[language]['image_analysis'],
            LANGUAGE_STRINGS[language]['financial_planning']
        ])
        
        active_tab_index = ["Home", LANGUAGE_STRINGS[language]['crop_advisor'], 
                          LANGUAGE_STRINGS[language]['image_analysis'], 
                          LANGUAGE_STRINGS[language]['financial_planning']].index(app_mode) - 1
        
        with tabs[0]:
            if active_tab_index == 0:
                display_crop_advisor()
        
        with tabs[1]:
            if active_tab_index == 1:
                display_image_analysis()
        
        with tabs[2]:
            if active_tab_index == 2:
                display_financial_planning(language)
    
    st.markdown("</main>", unsafe_allow_html=True)
    
    inject_footer()

if __name__ == "__main__":
    main()


image_analyzer.py
import os
from typing import Optional, Tuple
import google.generativeai as genai
from dotenv import load_dotenv
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

class ImageAnalyzer:
    def __init__(self, language="en"):
        """
        Initialize the ImageAnalyzer with specified language support
        
        Args:
            language (str): Language code ('en' for English, 'mr' for Marathi)
        """
        self.language = language
        api_key = os.getenv("GOOGLE_API_KEY")
        if not api_key:
            logger.error("GOOGLE_API_KEY environment variable not found")
            raise ValueError("GOOGLE_API_KEY is not set. Please add it to your .env file.")
        
        # Configure the generative AI
        try:
            genai.configure(api_key=api_key)
            # Use Gemini 1.5 Flash for fast image analysis
            self.model = genai.GenerativeModel('models/gemini-1.5-flash-latest')
            logger.info(f"ImageAnalyzer initialized with language: {language}")
        except Exception as e:
            logger.error(f"Error initializing generative AI model: {str(e)}")
            raise
        
        # Set language-specific prompts
        if self.language == "mr":
            self.analysis_prompt = (
                "‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∂‡•á‡§§‡•Ä ‡§Ü‡§£‡§ø ‡§™‡§ø‡§ï‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø‡§§‡§ú‡•ç‡§û ‡§Ü‡§π‡§æ‡§§. ‡§¶‡§ø‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§™‡§ø‡§ï‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡•á‡§ö‡•á ‡§∏‡§ñ‡•ã‡§≤ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§æ. "
                "‡§ï‡•É‡§™‡§Ø‡§æ ‡§ñ‡§æ‡§≤‡•Ä‡§≤ ‡§¨‡§æ‡§¨‡•Ä‡§Ç‡§ö‡•á ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡§æ:\n"
                "1. ‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡•á‡§§‡•Ç‡§® ‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ ‡§Ü‡§£‡§ø ‡§µ‡§æ‡§¢‡•Ä‡§ö‡§æ ‡§ü‡§™‡•ç‡§™‡§æ ‡§ì‡§≥‡§ñ‡§æ ‡§µ ‡§®‡§Æ‡•Ç‡§¶ ‡§ï‡§∞‡§æ.\n"
                "2. ‡§™‡§æ‡§®‡§æ‡§Ç‡§µ‡§∞‡•Ä‡§≤ ‡§∞‡§Ç‡§ó ‡§¨‡§¶‡§≤, ‡§°‡§æ‡§ó, ‡§Æ‡•Å‡§∞‡§ù‡§æ‡§£‡•á ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§á‡§§‡§∞ ‡§≤‡§ï‡•ç‡§∑‡§£‡•á ‡§§‡§™‡§æ‡§∏‡§æ.\n"
                "3. ‡§∏‡§Ç‡§≠‡§æ‡§µ‡•ç‡§Ø ‡§∞‡•ã‡§ó ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§ï‡§Æ‡§§‡§∞‡§§‡•á‡§ö‡•Ä ‡§∂‡§ï‡•ç‡§Ø‡§§‡§æ ‡§Ü‡§£‡§ø ‡§§‡•ç‡§Ø‡§æ‡§µ‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏‡§æ‡§ö‡•Ä ‡§™‡§æ‡§§‡§≥‡•Ä ‡§®‡§Æ‡•Ç‡§¶ ‡§ï‡§∞‡§æ.\n"
                "4. ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§™‡§æ‡§£‡•Ä ‡§¶‡•á‡§£‡•á, ‡§ñ‡§§ ‡§¶‡•á‡§£‡•á ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ï‡•Ä‡§ü‡§ï ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£‡§æ‡§∏‡§æ‡§†‡•Ä ‡§§‡§æ‡§§‡•ç‡§ï‡§æ‡§≥ ‡§â‡§™‡§æ‡§Ø ‡§∏‡•Å‡§ö‡§µ‡§æ.\n"
                "5. ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§Ö‡§ß‡§ø‡§ï ‡§§‡§™‡§æ‡§∏‡§£‡•Ä ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§∂‡§æ‡§≥‡•á‡§ö‡•Ä ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏ ‡§ï‡§∞‡§æ.\n"
                "6. ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§§‡§æ‡§®‡§æ ‡§∏‡•ç‡§•‡§æ‡§®‡§ø‡§ï ‡§Ü‡§£‡§ø ‡§π‡§Ç‡§ó‡§æ‡§Æ‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä ‡§µ‡§ø‡§ö‡§æ‡§∞‡§æ‡§§ ‡§ò‡•ç‡§Ø‡§æ.\n"
                "7. ‡§∂‡•á‡§µ‡§ü‡•Ä ‡§â‡§§‡•ç‡§§‡§∞‡§æ‡§ö‡§æ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂ ‡§¶‡•ç‡§Ø‡§æ ‡§ú‡•á‡§£‡•á‡§ï‡§∞‡•Ç‡§® ‡§∂‡•á‡§§‡§ï‡§±‡•ç‡§Ø‡§æ‡§≤‡§æ ‡§∏‡§∞‡•ç‡§µ‡§æ‡§§ ‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§ö‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§µ‡§æ‡§ö‡§§‡§æ ‡§Ø‡•á‡§à‡§≤.\n"
                "‡§ú‡§∞ ‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡§æ ‡§∂‡•á‡§§‡•Ä‡§∂‡•Ä ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§®‡§∏‡•á‡§≤, ‡§§‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•ç‡§Ø‡§æ: '‡§¶‡§ø‡§≤‡•á‡§≤‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡§æ ‡§∂‡•á‡§§‡•Ä‡§∂‡•Ä ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§¶‡§ø‡§∏‡§§ ‡§®‡§æ‡§π‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•à‡§ß ‡§™‡§ø‡§ï‡§æ‡§ö‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡§æ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ.'"
            )
        else:
            self.analysis_prompt = (
                "You are an expert agricultural assistant specialized in crop health analysis for Indian farmers. Analyze the provided crop image thoroughly. "
                "Please perform the following steps in your analysis:\n"
                "1. Identify and state the crop type and its growth stage visible in the image.\n"
                "2. Describe any visible symptoms such as discoloration, spots, wilting, or lesions on the leaves or stems.\n"
                "3. List possible diagnoses with associated confidence levels for each potential disease or nutrient deficiency.\n"
                "4. Provide region-specific recommendations for immediate actions such as additional watering, fertilization, or pest treatment.\n"
                "5. Advise if further information or lab testing is recommended for confirmation.\n"
                "6. Consider the Indian regional context and seasonal factors while formulating your analysis.\n"
                "7. Conclude with a summary of key findings and recommendations that would be most valuable to the farmer.\n"
                "If the image does not appear to be related to a crop, respond with: 'The image provided does not seem to be related to an agricultural crop. Please upload a valid crop image.'"
            )

    def analyze_crop_image(self, image_data: bytes) -> Tuple[Optional[str], Optional[str]]:
        """
        Analyze the provided crop image using the AI model
        
        Args:
            image_data (bytes): The image data to analyze
            
        Returns:
            Tuple[Optional[str], Optional[str]]: A tuple containing (analysis_text, error_message)
        """
        try:
            logger.info("Analyzing crop image")
            response = self.model.generate_content([
                self.analysis_prompt,
                {"mime_type": "image/jpeg", "data": image_data}
            ])
            
            if response.text:
                logger.info("Image analysis successful")
                return response.text, None
            
            logger.warning("No analysis generated from the AI model")
            return None, "No analysis generated. Please try with a clearer image." if self.language == "en" else "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§ù‡§æ‡§≤‡•á ‡§®‡§æ‡§π‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡•á‡§∏‡§π ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ."
        
        except Exception as e:
            logger.error(f"Error analyzing crop image: {str(e)}")
            error_msg = f"Error: {str(e)}"
            
            # Provide more user-friendly error messages based on error type
            if "API key" in error_msg:
                return None, "Invalid API key configuration. Please contact support." if self.language == "en" else "‡§Ö‡§µ‡•à‡§ß API ‡§ï‡•Ä ‡§ï‡•â‡§®‡•ç‡§´‡§ø‡§ó‡§∞‡•á‡§∂‡§®. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü‡§∂‡•Ä ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§∏‡§æ‡§ß‡§æ."
            elif "network" in error_msg.lower() or "timeout" in error_msg.lower():
                return None, "Network error. Please check your internet connection and try again." if self.language == "en" else "‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ü‡§™‡§≤‡•á ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§§‡§™‡§æ‡§∏‡§æ ‡§Ü‡§£‡§ø ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ."
            elif "content filtered" in error_msg.lower():
                return None, "The image couldn't be processed. Please upload a different crop image." if self.language == "en" else "‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡•á‡§µ‡§∞ ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡§∞‡§£‡•á ‡§∂‡§ï‡•ç‡§Ø ‡§ù‡§æ‡§≤‡•á ‡§®‡§æ‡§π‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•á‡§ó‡§≥‡•Ä ‡§™‡•Ä‡§ï ‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡§æ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ."
            
            return None, f"Analysis failed: {error_msg}" if self.language == "en" else f"‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä: {error_msg}"



crop_advisor.py
import os
import google.generativeai as genai
from typing import Optional, Tuple
from dotenv import load_dotenv
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

class CropAdvisor:
    def __init__(self, language="en"):
        """
        Initialize the CropAdvisor with specified language support
        
        Args:
            language (str): Language code ('en' for English, 'mr' for Marathi)
        """
        self.language = language
        api_key = os.getenv("GOOGLE_API_KEY")
        if not api_key:
            logger.error("GOOGLE_API_KEY environment variable not found")
            raise ValueError("GOOGLE_API_KEY not found. Please set it in your .env file.")
        
        # Configure the generative AI
        try:
            genai.configure(api_key=api_key)
            # Use Gemini 1.5 Pro for comprehensive text-based advice
            self.model = genai.GenerativeModel('models/gemini-1.5-pro-002')
            logger.info(f"CropAdvisor initialized with language: {language}")
        except Exception as e:
            logger.error(f"Error initializing generative AI model: {str(e)}")
            raise
        
        # Set language-specific prompts
        if self.language == "mr":
            self.base_prompt = (
                "‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∂‡•á‡§§‡•Ä‡§§ ‡§§‡§ú‡•ç‡§û ‡§Ü‡§π‡§æ‡§§ ‡§Ü‡§£‡§ø ‡§∂‡•á‡§§‡§ï‡§±‡•ç‡§Ø‡§æ‡§Ç‡§®‡§æ ‡§™‡§ø‡§ï‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø, ‡§∞‡•ã‡§ó ‡§ì‡§≥‡§ñ ‡§Ü‡§£‡§ø ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§∂‡•á‡§§‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä‡§Ç‡§¨‡§æ‡§¨‡§§ ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§¶‡•á‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Æ‡§æ‡§π‡§ø‡§∞ ‡§Ü‡§π‡§æ‡§§. "
                "‡§ñ‡§æ‡§≤‡•Ä‡§≤ ‡§™‡§ø‡§ï‡§æ‡§∏‡§æ‡§†‡•Ä ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§, ‡§∏‡§ñ‡•ã‡§≤ ‡§Ü‡§£‡§ø ‡§™‡•Å‡§∞‡§æ‡§µ‡•ç‡§Ø‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§≠‡•Ç‡§§ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¶‡•ç‡§Ø‡§æ. "
                "‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§æ‡§§ ‡§ñ‡§æ‡§≤‡•Ä‡§≤ ‡§¨‡§æ‡§¨‡•Ä‡§Ç‡§ö‡§æ ‡§∏‡§Æ‡§æ‡§µ‡•á‡§∂ ‡§Ö‡§∏‡§æ‡§µ‡§æ:\n"
                "1. ‡§™‡§ø‡§ï‡§æ‡§ö‡•Ä ‡§®‡§ø‡§µ‡§° ‡§Ü‡§£‡§ø ‡§¨‡§ø‡§Ø‡§æ‡§Ç‡§ö‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§§‡§™‡§æ‡§∏‡§£‡•Ä.\n"
                "2. ‡§ú‡§Æ‡•Ä‡§® ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§£‡•á, ‡§Æ‡§æ‡§§‡•Ä‡§ö‡•Ä ‡§§‡§™‡§æ‡§∏‡§£‡•Ä ‡§Ü‡§£‡§ø ‡§∏‡•Å‡§ß‡§æ‡§∞‡§£‡§æ ‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏‡•Ä.\n"
                "3. ‡§∏‡•ç‡§•‡§æ‡§®‡§ø‡§ï ‡§π‡§µ‡§æ‡§Æ‡§æ‡§®‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§™‡•á‡§∞‡§£‡•Ä ‡§µ ‡§≤‡§æ‡§ó‡§µ‡§°‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä.\n"
                "4. ‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§§‡•á‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡§ø‡§Ç‡§ö‡§®‡§æ‡§ö‡•Ä ‡§ó‡§∞‡§ú.\n"
                "5. ‡§ñ‡§§ ‡§Ü‡§£‡§ø ‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§µ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§®, ‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§Ü‡§£‡§ø ‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï ‡§¶‡•ã‡§®‡•ç‡§π‡•Ä ‡§™‡§∞‡•ç‡§Ø‡§æ‡§Ø.\n"
                "6. ‡§ï‡•Ä‡§ü‡§ï ‡§µ ‡§∞‡•ã‡§ó ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£‡§æ‡§∏‡§æ‡§†‡•Ä ‡§è‡§ï‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä ‡§Ü‡§£‡§ø ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏‡•Ä.\n"
                "7. ‡§µ‡§æ‡§¢‡•Ä‡§ö‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§£‡•Ä ‡§Ü‡§£‡§ø ‡§ï‡§æ‡§™‡§£‡•Ä‡§ö‡•Ä ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§µ‡•á‡§≥.\n"
                "8. ‡§ï‡§æ‡§™‡§£‡•Ä ‡§®‡§Ç‡§§‡§∞‡§ö‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ, ‡§∏‡§æ‡§†‡§µ‡§£ ‡§Ü‡§£‡§ø ‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ.\n"
                "9. ‡§™‡§ø‡§ï, ‡§ú‡§Æ‡•Ä‡§® ‡§Ü‡§£‡§ø ‡§¨‡§ú‡•á‡§ü‡§ö‡•ç‡§Ø‡§æ ‡§Ü‡§ß‡§æ‡§∞‡•á ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§®‡§ø‡§Ø‡•ã‡§ú‡§® ‡§ü‡§ø‡§™‡•ç‡§∏.\n"
                "10. ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡§æ‡§§ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§Ö‡§∏‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§∂‡§æ‡§∏‡§ï‡•Ä‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§µ ‡§∏‡§¨‡§∏‡§ø‡§°‡•Ä‡§ö‡§æ ‡§â‡§≤‡•ç‡§≤‡•á‡§ñ ‡§ï‡§∞‡§æ.\n"
                "‡§ú‡§∞ ‡§á‡§®‡§™‡•Å‡§ü ‡§µ‡•à‡§ß ‡§®‡§∏‡•á‡§≤ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§∂‡•á‡§§‡•Ä‡§∂‡•Ä ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§®‡§∏‡•á‡§≤, ‡§§‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•ç‡§Ø‡§æ: '‡§¶‡§ø‡§≤‡•á‡§≤‡§æ ‡§á‡§®‡§™‡•Å‡§ü ‡§∂‡•á‡§§‡•Ä‡§∂‡•Ä ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§¶‡§ø‡§∏‡§§ ‡§®‡§æ‡§π‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•à‡§ß ‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ ‡§≠‡§∞‡§æ.'\n\n"
                "‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ: "
            )
        else:
            self.base_prompt = (
                "You are an expert agricultural assistant specialized in providing advice to Indian farmers about crop health, disease identification, and best farming practices. "
                "Provide a comprehensive, detailed, and evidence-based plan for cultivating the specified crop in Indian conditions. "
                "Your analysis should include the following aspects:\n"
                "1. Crop selection and seed quality considerations, with specific varieties suited for Indian regions.\n"
                "2. Land preparation including soil testing and amendment recommendations for Indian soil types.\n"
                "3. Sowing and planting methods suitable for the region's climate and seasonal patterns in India.\n"
                "4. Irrigation requirements based on local water availability and conservation techniques.\n"
                "5. Fertilization and nutrient management, including both organic and inorganic options accessible in India.\n"
                "6. Pest and disease management strategies, including integrated pest management practices suited for Indian agriculture.\n"
                "7. Growth monitoring and timing for harvest optimal for Indian market conditions.\n"
                "8. Post-harvest processing, storage, and market strategies for Indian agricultural markets.\n"
                "9. Financial planning tips tailored to the crop, land, and budget considerations of an Indian farmer.\n"
                "10. Include references to any government schemes or subsidies available for this crop.\n"
                "If the input is invalid or not related to agriculture, reply: 'The input provided does not seem to relate to agricultural practices. Please provide a valid crop name.'\n\n"
                "Crop Name: "
            )
            
    def get_crop_advice(self, crop_name: str) -> Tuple[Optional[str], Optional[str]]:
        """
        Get detailed advice for the specified crop
        
        Args:
            crop_name (str): The name of the crop to get advice for
            
        Returns:
            Tuple[Optional[str], Optional[str]]: A tuple containing (advice_text, error_message)
        """
        try:
            if not crop_name.strip():
                return None, ("Please enter a valid crop name." if self.language=="en" else "‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•à‡§ß ‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ ‡§≠‡§∞‡§æ.")
            
            logger.info(f"Getting crop advice for: {crop_name}")
            prompt = f"{self.base_prompt}{crop_name}"
            
            # Set safety settings to allow agricultural content
            safety_settings = [
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_ONLY_HIGH"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH",
                    "threshold": "BLOCK_ONLY_HIGH"
                },
                {
                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    "threshold": "BLOCK_ONLY_HIGH"
                },
                {
                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                    "threshold": "BLOCK_ONLY_HIGH"
                }
            ]
            
            response = self.model.generate_content(
                prompt, 
                safety_settings=safety_settings,
                generation_config={
                    "temperature": 0.2,
                    "top_p": 0.95,
                    "top_k": 40,
                    "max_output_tokens": 4096,
                }
            )
            
            if not response.text:
                logger.warning(f"Empty response for crop: {crop_name}")
                return None, "Failed to generate advice. Please try again." if self.language=="en" else "‡§∏‡§≤‡•ç‡§≤‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ."
                
            logger.info(f"Successfully generated advice for: {crop_name}")
            return response.text, None
            
        except Exception as e:
            logger.error(f"Error generating crop advice: {str(e)}")
            error_msg = f"AI Error: {str(e)}"
            
            # Provide more user-friendly error messages
            if "API key" in error_msg.lower():
                return None, "API key configuration error. Please contact support." if self.language=="en" else "API ‡§ï‡•Ä ‡§ï‡•â‡§®‡•ç‡§´‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü‡§∂‡•Ä ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§∏‡§æ‡§ß‡§æ."
            elif "network" in error_msg.lower() or "timeout" in error_msg.lower():
                return None, "Network error. Please check your internet connection." if self.language=="en" else "‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ü‡§™‡§≤‡•á ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§§‡§™‡§æ‡§∏‡§æ."
            elif "content filtered" in error_msg.lower():
                return None, "Content filtered. Please try with different wording." if self.language=="en" else "‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡•á‡§≤‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•á‡§ó‡§≥‡•ç‡§Ø‡§æ ‡§∂‡§¨‡•ç‡§¶‡§æ‡§Ç‡§∏‡§π ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ."
                
            return None, error_msg


financial_planning.py
import os
import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv

load_dotenv()

class FinancialPlanner:
    def __init__(self, language="en"):
        self.language = language
        api_key = os.getenv("GOOGLE_API_KEY")
        if not api_key:
            raise ValueError("GOOGLE_API_KEY is not set. Please set it in your .env file.")
        genai.configure(api_key=api_key)
        # Use the same high-quality multimodal model for text-based financial planning
        self.model = genai.GenerativeModel('models/gemini-1.5-pro-002')
        # Set appropriate prompts based on language
        self.set_prompts()
    
    def set_prompts(self):
        """Set financial planning prompts based on selected language"""
        if self.language == "mr":
            self.financial_prompt = (
                "‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∂‡•á‡§§‡§ï‡§±‡•ç‡§Ø‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§®‡§ø‡§Ø‡•ã‡§ú‡§® ‡§Ü‡§£‡§ø ‡§¨‡§ú‡•á‡§ü‡§ø‡§Ç‡§ó‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§§‡§ú‡•ç‡§û ‡§Ü‡§π‡§æ‡§§. ‡§ñ‡§æ‡§≤‡•Ä‡§≤ ‡§á‡§®‡§™‡•Å‡§ü‡•ç‡§∏‡§ö‡•ç‡§Ø‡§æ ‡§Ü‡§ß‡§æ‡§∞‡•á: ‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ, ‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≥ (‡§è‡§ï‡§∞ ‡§Æ‡§ß‡•ç‡§Ø‡•á), ‡§Ü‡§£‡§ø ‡§¨‡§ú‡•á‡§ü (INR ‡§Æ‡§ß‡•ç‡§Ø‡•á), "
                "‡§è‡§ï ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§®‡§ø‡§Ø‡•ã‡§ú‡§® ‡§∞‡§£‡§®‡•Ä‡§§‡•Ä ‡§¶‡•ç‡§Ø‡§æ. ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§≤‡•ç‡§≤‡•ç‡§Ø‡§æ‡§§ ‡§ñ‡§æ‡§≤‡•Ä‡§≤ ‡§¨‡§æ‡§¨‡•Ä‡§Ç‡§ö‡§æ ‡§∏‡§Æ‡§æ‡§µ‡•á‡§∂ ‡§Ö‡§∏‡§æ‡§µ‡§æ:\n"
                "1. ‡§ú‡§Æ‡•Ä‡§® ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§£‡•á, ‡§¨‡§ø‡§Ø‡§æ‡§£‡•á, ‡§ñ‡§§, ‡§∏‡§ø‡§Ç‡§ö‡§®, ‡§Æ‡§ú‡•Å‡§∞‡•Ä ‡§Ü‡§£‡§ø ‡§ï‡§æ‡§™‡§£‡•Ä ‡§®‡§Ç‡§§‡§∞‡§ö‡•ç‡§Ø‡§æ ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡•á‡§ö‡§æ ‡§Ö‡§Ç‡§¶‡§æ‡§ú‡•á ‡§ñ‡§∞‡•ç‡§ö.\n"
                "2. ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§™‡§ø‡§ï‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§£‡§ø ‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≥‡§æ‡§∏‡§æ‡§†‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§∂‡§æ‡§∏‡§ï‡•Ä‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ, ‡§∏‡§¨‡§∏‡§ø‡§°‡•Ä ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ï‡§∞‡•ç‡§ú‡§æ‡§¨‡§¶‡•ç‡§¶‡§≤ ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏.\n"
                "3. ‡§ñ‡§∞‡•ç‡§ö ‡§µ‡§æ‡§ö‡§µ‡§£‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§Ü‡§£‡§ø ‡§®‡§´‡§æ ‡§µ‡§æ‡§¢‡§µ‡§£‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§∞‡§£‡§®‡•Ä‡§§‡•Ä, ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Ü‡§£‡§ø ‡§ú‡•ã‡§ñ‡§Æ‡•Ä‡§ö‡•á ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§®.\n"
                "4. ‡§¨‡§ú‡•á‡§ü‡§ö‡•ç‡§Ø‡§æ ‡§Æ‡§∞‡•ç‡§Ø‡§æ‡§¶‡•á‡§®‡•Å‡§∏‡§æ‡§∞ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§µ‡§æ‡§¢‡§µ‡§£‡•ç‡§Ø‡§æ‡§ö‡•á ‡§â‡§™‡§æ‡§Ø.\n"
                "5. ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∏‡•Å‡§∏‡•ç‡§™‡§∑‡•ç‡§ü, ‡§∏‡§Ç‡§∞‡§ö‡§ø‡§§ ‡§Ü‡§£‡§ø ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§∏‡•ç‡§µ‡§∞‡•Ç‡§™‡§æ‡§§ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§æ.\n"
                "‡§ú‡§∞ ‡§è‡§ñ‡§æ‡§¶‡§æ ‡§á‡§®‡§™‡•Å‡§ü ‡§Ö‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§Ö‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü‡•Ä‡§ï‡§∞‡§£ ‡§Æ‡§æ‡§ó‡§æ.\n\n"
                "‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ: {crop}\n‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≥ (‡§è‡§ï‡§∞): {land}\n‡§¨‡§ú‡•á‡§ü (INR): {budget}\n"
            )
        else:
            self.financial_prompt = (
                "You are an expert agricultural financial advisor specialized in planning and budgeting for Indian farmers. "
                "Based on the following inputs: Crop type, Land area (in acres), and Budget (in INR), provide a detailed financial planning strategy tailored to Indian agricultural context. "
                "Your advice should include:\n"
                "1. An estimated cost breakdown for land preparation, seeds, fertilizers, irrigation, labor, and post-harvest processing.\n"
                "2. Recommendations on government schemes, subsidies, or loans available for the specified crop and land size in India.\n"
                "3. Strategies for cost-saving and maximizing profit, including market analysis and risk mitigation.\n"
                "4. Suggestions for scaling up operations if the budget allows.\n"
                "5. Present your financial analysis in a clear, structured, and actionable format.\n"
                "If any input is missing or unclear, ask for clarification.\n\n"
                "Crop Type: {crop}\nLand Area (acres): {land}\nBudget (INR): {budget}\n"
            )

    def get_financial_plan(self, crop: str, land: float, budget: float) -> (str, str):
        """
        Get financial plan based on crop, land, and budget
        
        Args:
            crop: The name of the crop
            land: Land area in acres
            budget: Budget in INR
            
        Returns:
            Tuple containing plan text and error message (if any)
        """
        if not crop.strip():
            return None, "Please enter a valid crop name." if self.language=="en" else "‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•à‡§ß ‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ ‡§≠‡§∞‡§æ."
        if land <= 0:
            return None, "Please enter a valid land area." if self.language=="en" else "‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•à‡§ß ‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≥ ‡§≠‡§∞‡§æ."
        if budget <= 0:
            return None, "Please enter a valid budget." if self.language=="en" else "‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•à‡§ß ‡§¨‡§ú‡•á‡§ü ‡§≠‡§∞‡§æ."
        
        prompt = self.financial_prompt.format(crop=crop, land=land, budget=budget)
        try:
            response = self.model.generate_content(prompt)
            if response.text:
                return response.text, None
            return None, "No financial plan generated." if self.language=="en" else "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ù‡§æ‡§≤‡•Ä ‡§®‡§æ‡§π‡•Ä."
        except Exception as e:
            return None, f"Error: {str(e)}"

def display_financial_planning(language="en"):
    """
    Display the financial planning UI
    
    Args:
        language: Language code (en/mr)
    """
    # Get language strings dictionary
    LANGUAGE_STRINGS = {
        "en": {
            "financial_planning": "Financial Planning",
            "enter_crop_type": "Enter Crop Type",
            "enter_land_area": "Enter Land Area (acres):",
            "enter_budget": "Enter Budget (INR):",
            "get_financial_plan": "Get Financial Plan",
            "plan": "Plan"
        },
        "mr": {
            "financial_planning": "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§®‡§ø‡§Ø‡•ã‡§ú‡§®",
            "enter_crop_type": "‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ ‡§≠‡§∞‡§æ",
            "enter_land_area": "‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≥ (‡§è‡§ï‡§∞):",
            "enter_budget": "‡§¨‡§ú‡•á‡§ü (INR):",
            "get_financial_plan": "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§æ",
            "plan": "‡§Ø‡•ã‡§ú‡§®‡§æ"
        }
    }
    
    st.markdown(f"<h2 style='color: #2E7D32;'>{LANGUAGE_STRINGS[language]['financial_planning']}</h2>", unsafe_allow_html=True)
    
    crop = st.text_input(LANGUAGE_STRINGS[language]['enter_crop_type'])
    land = st.number_input(LANGUAGE_STRINGS[language]['enter_land_area'], min_value=0.0, step=0.1, format="%.2f")
    budget = st.number_input(LANGUAGE_STRINGS[language]['enter_budget'], min_value=0.0, step=1000.0, format="%.2f")
    
    if st.button(LANGUAGE_STRINGS[language]['get_financial_plan']):
        try:
            planner = FinancialPlanner(language)
            with st.spinner("Generating financial plan..." if language=="en" else "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡•á‡§≤‡•Ä ‡§ú‡§æ‡§§ ‡§Ü‡§π‡•á..."):
                plan, error = planner.get_financial_plan(crop, land, budget)
                if error:
                    st.error(error)
                else:
                    st.markdown(f"<div class='chat-response'><strong>{LANGUAGE_STRINGS[language]['plan']}:</strong> {plan}</div>", unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Initialization Error: {str(e)}")

style.css
/* BASE STYLE */
body {
    background-color: #f5f7fa;
    color: #333333;
    font-family: 'Montserrat', 'Playfair Display', sans-serif;
    margin: 0;
    padding: 0;
    min-height: 100vh;
    position: relative;
}

html, body {
    height: 100%;
    margin: 0;
    padding: 0;
}

main {
    margin-top: 70px;
    padding: 20px 50px 100px;
    min-height: calc(100vh - 170px);
}

/* HEADER */
header {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%; 
    z-index: 9999;
    background: linear-gradient(90deg, #2E7D32, #66BB6A);
    color: #ffffff;
    margin: 0;
    padding: 0;  
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.header-content {
    max-width: 1200px; 
    margin: 0 auto;    
    padding: 0.5rem 2rem; 
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.logo {
    font-size: 1.8rem;
    font-weight: bold;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.logo img {
    height: 40px;
    width: 40px;
}

.user-actions {
    font-size: 1rem;
    display: flex;
    align-items: center;
    gap: 20px;
}

.logout-btn {
    background-color: rgba(255, 255, 255, 0.2);
    color: white;
    padding: 5px 15px;
    border-radius: 20px;
    text-decoration: none;
    font-weight: bold;
    transition: background-color 0.3s;
}

.logout-btn:hover {
    background-color: rgba(255, 255, 255, 0.3);
}

/* Headings */
h1, h2, h3, h4 {
    color: #2E7D32;
    margin-bottom: 1rem;
}

/* Cards & Sections */
.image-analysis {
    background-color: #fff;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
}

/* Chat response style */
.chat-response {
    background-color: #ffffff;
    color: #000000;
    padding: 1rem 1.5rem;
    border-radius: 10px;
    margin: 1.5rem 0;
    font-size: 1.1rem;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    border-left: 4px solid #2E7D32;
}

/* BUTTONS */
button, .btn-primary, .stButton button {
    background-color: #2E7D32 !important;
    color: #ffffff !important;
    padding: 0.7rem 1.8rem;
    border: none !important;
    border-radius: 8px !important;
    cursor: pointer;
    font-weight: 600 !important;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

button:hover, .btn-primary:hover, .stButton button:hover {
    background-color: #66BB6A !important;
    transform: translateY(-2px);
}

/* Responsive design */
@media (max-width: 768px) {
    .header-content {
        flex-direction: column;
        text-align: center;
        gap: 10px;
        padding: 1rem;
    }
    
    main {
        padding: 20px 20px 100px;
        margin-top: 100px;
    }
    
    .logo {
        font-size: 1.5rem;
    }
    
    .user-actions {
        font-size: 0.9rem;
    }
    
    .footer-content {
        flex-direction: column;
        text-align: center;
        gap: 10px;
    }
    
    .footer-right {
        margin-right: 0;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 15px;
    }
    
    .footer-right a, .footer-right span {
        margin-left: 0;
    }
}

.block-container {
    max-width: 1200px !important;        
    padding-left: 0.5rem !important;
    padding-right: 0.5rem !important;
    margin: 0 auto !important;         
}

/* FOOTER */
footer {
    position: fixed;
    bottom: 0;
    left: 0;
    height: 70px;
    width: 100%;
    padding: 0;
    background: linear-gradient(90deg, #2E7D32, #66BB6A);
    color: #ffffff;
    text-align: center;
    box-shadow: 0 -2px 12px rgba(0, 0, 0, 0.1);
    z-index: 9999;
}

.footer-content {
    height: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 2rem;
}

.footer-left p {
    margin: 0;
}

.footer-right {
    display: flex;
    align-items: center;
}

.footer-right a, .footer-right span {
    margin-left: 1.5rem;
    color: #ffffff;
    text-decoration: none;
    font-weight: 600;
}

.footer-right a:hover {
    text-decoration: underline;
}

/* Streamlit specific overrides */
.st-emotion-cache-16txtl3 {
    padding-top: 0 !important;
}

.st-emotion-cache-18ni7ap {
    background-color: rgba(46, 125, 50, 0.1) !important;
}

/* Tab styling */
.stTabs [data-baseweb="tab-list"] {
    gap: 2px;
    background-color: #f0f0f0;
    border-radius: 10px 10px 0 0;
    padding: 0 20px;
}

.stTabs [data-baseweb="tab"] {
    background-color: transparent;
    border-radius: 10px 10px 0 0;
    padding: 10px 20px;
    color: #333;
}

.stTabs [aria-selected="true"] {
    background-color: white !important;
    color: #2E7D32 !important;
    font-weight: bold;
}

.stTabs [data-baseweb="tab-panel"] {
    background-color: white;
    border-radius: 0 0 10px 10px;
    padding: 20px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}

/* Input fields */
.st-emotion-cache-q8sbsg {
    border: 1px solid #ddd !important;
    border-radius: 8px !important;
}

.st-emotion-cache-q8sbsg:focus {
    border-color: #2E7D32 !important;
    box-shadow: 0 0 0 1px #2E7D32 !important;
}

/* File uploader */
.st-emotion-cache-1erivf3 {
    border: 2px dashed #2E7D32 !important;
    border-radius: 10px !important;
    padding: 30px !important;
}

/* Sidebar */
.st-emotion-cache-6qob1r {
    background-color: #f8f9fa !important;
}

.st-emotion-cache-16idsys {
    padding-top: 2rem;
    padding-bottom: 2rem;
}

/* Control sidebar width */
[data-testid="stSidebar"] {
    min-width: 250px !important;
    max-width: 250px !important;
}

/* Make the language selector more prominent */
[data-testid="stSidebar"] .stSelectbox {
    margin-bottom: 2rem;
}

.marathi-text {
    font-family: 'Noto Sans Devanagari', sans-serif;
}